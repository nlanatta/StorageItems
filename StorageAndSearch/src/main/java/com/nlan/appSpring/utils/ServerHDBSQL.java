package com.nlan.appSpring.utils;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.hsqldb.Server;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.server.ServerAcl.AclFormatException;

public class ServerHDBSQL {
	public static void main(String[] args) throws IOException, AclFormatException {
		System.out.println("server is running");

		String TMP_DIR  = "/build/test/";
		String dblocation = TMP_DIR + "db_items_storage";
		Properties database = database();
		HsqlProperties p = new HsqlProperties();
		
		p.setProperty("server.database.0", "file:"+ dblocation);//"mem:mainDb;hsqldb.write_delay=false");
		p.setProperty("server.dbname.0", "db_items_storage");
		p.setProperty("server.port", 3336);
		Server server = new Server();
		server.setProperties(p);
		server.start();

		Connection connection = null;
		Statement statement = null;

		try {
			Class.forName(database.getProperty("jdbc.driverClassName"));
		} catch (Exception e) {
			System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
			e.printStackTrace();
			return;
		}

		try {
			connection = DriverManager.getConnection(database.getProperty("jdbc.url"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		if (connection == null) {
			System.out.println(" connection null");
			return;
		}
		try {
			statement = connection.createStatement();			
			statement.executeUpdate("DROP TABLE IF EXISTS stock");
			
			String sql = "CREATE TABLE stock (STOCK_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1)NOT NULL PRIMARY KEY,STOCK_DESCRIPTION varchar(100) NOT NULL,STOCK_NAME varchar(45) NOT NULL,STOCK_IMAGE varchar(45) NOT NULL)";
			statement.executeUpdate(sql);
			statement.close();
			connection.commit();
			connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		//server.stop();
	}

	private static Properties database() {
		Properties prop = new Properties();
		InputStream stream = null;

		ClassLoader loader = Thread.currentThread().getContextClassLoader();
		try {
			stream = loader.getResourceAsStream("database.properties");
		} finally {
			if (stream != null) {
				try {
					prop.load(stream);
					stream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

		}

		return prop;
	}
}
