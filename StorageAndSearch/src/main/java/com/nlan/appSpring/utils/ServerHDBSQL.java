package com.nlan.appSpring.utils;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Objects;
import java.util.Properties;

import org.hsqldb.Server;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.server.ServerAcl.AclFormatException;

public class ServerHDBSQL {
	private static Server server;

	public static void main(String[] args) throws IOException, AclFormatException {
		System.out.println("server is running");
		runAndCreateDB();
	}

	public static void runAndCreateDB() throws IOException, AclFormatException {
		String TMP_DIR = "/build/test/";
		String dblocation = TMP_DIR + "db_items_storage";
		Properties database = database();
		HsqlProperties p = new HsqlProperties();

		p.setProperty("server.database.0", "mem:" + dblocation);
		p.setProperty("server.dbname.0", "db_items_storage");
		p.setProperty("server.port", 3336);
		server = new Server();
		server.setProperties(p);
		server.start();

		Connection connection = null;
		Statement statement = null;

		try {
			Class.forName(database.getProperty("jdbc.driverClassName"));
		} catch (Exception e) {
			System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
			e.printStackTrace();
			return;
		}

		try {
			connection = DriverManager.getConnection(database.getProperty("jdbc.url"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		if (connection == null) {
			System.out.println(" connection null");
			return;
		}
		try {
			createItemTable(statement, connection);
			createCategoryTable(statement, connection);
			createRelationItemCatTable(statement, connection);
			connection.commit();
			connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private static void createRelationItemCatTable(Statement statement, Connection connection) throws SQLException {
		String tableName = "stock_category";
		String query = "CREATE TABLE "+tableName+" (STOCK_ID INTEGER NOT NULL,"
				+ "CATEGORY_ID INTEGER NOT NULL,"
				+ "PRIMARY KEY(STOCK_ID, CATEGORY_ID),"
				+ "CONSTRAINT FK_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES category(CATEGORY_ID),"
				+ "CONSTRAINT FK_STOCK_ID FOREIGN KEY (STOCK_ID) REFERENCES stock(STOCK_ID)"
				+ ")";
		executeTable(statement, connection, tableName, query);
//		statement = connection.createStatement();
//		statement.executeUpdate("SET DATABASE REFERENTIAL INTEGRITY FALSE");
//		statement.executeUpdate("DROP CONSTRAINT IF EXISTS FK_CATEGORY_ID CASCADE");
//		statement.executeUpdate("DROP CONSTRAINT IF EXISTS FK_STOCK_ID CASCADE");
//		statement.executeUpdate("DROP TABLE IF EXISTS "+tableName+" CASCADE");
//		statement.executeUpdate(query);
//		statement.close();
	}

	private static void createCategoryTable(Statement statement, Connection connection) throws SQLException {
		String tableName = "category";
		String query = "CREATE TABLE "+tableName+" (CATEGORY_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1)NOT NULL PRIMARY KEY,"
				+ "CATEGORY_NAME varchar(100) NOT NULL"
				+ ")";
		executeTable(statement, connection, tableName, query);
	}

	private static void createItemTable(Statement statement, Connection connection) throws SQLException {
		String tableName = "stock";
		String query = "CREATE TABLE "+tableName+" (STOCK_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1)NOT NULL PRIMARY KEY,"
				+ "STOCK_DESCRIPTION varchar(100) NOT NULL,"
				+ "STOCK_NAME varchar(45) NOT NULL,STOCK_IMAGE varchar(45) NOT NULL"
				+ ")";
		executeTable(statement, connection, tableName, query);
	}

	private static void executeTable(Statement statement, Connection connection, String tableName, String query) throws SQLException {
		statement = connection.createStatement();
		statement.executeUpdate("SET DATABASE REFERENTIAL INTEGRITY FALSE");
		statement.executeUpdate("DROP TABLE IF EXISTS "+tableName+" CASCADE");
		statement.executeUpdate(query);
		statement.close();
	}

	public static void closeServer() {
		if (Objects.nonNull(server)) {
			server.stop();
		}
	}

	private static Properties database() {
		Properties prop = new Properties();
		InputStream stream = null;

		ClassLoader loader = Thread.currentThread().getContextClassLoader();
		try {
			stream = loader.getResourceAsStream("database.properties");
		} finally {
			if (stream != null) {
				try {
					prop.load(stream);
					stream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

		}

		return prop;
	}
}
